// tag::imports[]


import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

// end::imports[]
// tag::plugins[]
plugins {
    id 'org.springframework.boot' version '2.2.7.RELEASE' // <1>
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.72'
    id 'io.jumpco.open.kfsm.viz-plugin' version '1.0.9' // <2>
    id 'com.bmuschko.docker-spring-boot-application' version '7.1.0' // <3>
    id 'com.bmuschko.docker-remote-api' version '7.1.0' // <4>
}
// end::plugins[]
group = 'com.example'
version = '1.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'io.jumpco.open:kfsm-jvm:1.0.2'

    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    runtimeOnly 'com.sun.xml.bind:jaxb-impl:2.3.3'

    runtimeOnly 'com.h2database:h2:1.4.200'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude(group: 'org.junit.vintage', module: 'junit-vintage-engine')
    }
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}


assemble.dependsOn("generateFsmViz")

kfsmViz {
    fsm("TurnstileFSM") {
        outputFolder = file('generated')
        input = file('src/main/kotlin/com/example/kfsm/Turnstile.kt')
        isGeneratePlantUml = true // Required default is false
        isGenerateAsciidoc = true // Required default is false
        output = 'turnstile'
    }
}

// tag::dockerImageNames[]
def dockerImageNames = [ // <1>
  'guide/sample-app:1.0',
  'guide/sample-app:latest'
] as Set<String>

docker {
    springBootApplication {
        images = dockerImageNames // <2>
    }
}
// end::dockerImageNames[]

// tag::verifyImage[]
task verifyImage(dependsOn: dockerBuildImage) { // <1>
    group 'verification'
    doLast {
        assert dockerBuildImage.images.get() == dockerImageNames // <2>
        logger.lifecycle "$name:verified $dockerImageNames"
    }
}
check.dependsOn(verifyImage) // <3>
// end::verifyImage[]
// tag::createContainer[]
task createContainer(
    type: DockerCreateContainer, // <1>
    dependsOn: dockerBuildImage // <2>
) {
    targetImageId dockerBuildImage.imageId // <3>
}
// end::createContainer[]
// tag::startContainer[]
task startContainer(
    type: DockerStartContainer, // <1>
    dependsOn: createContainer // <2>
) {
    targetContainerId createContainer.containerId // <3>
    onComplete {
        logger.lifecycle "$name:started:${createContainer.containerId.get()}"
    }
}
// end::startContainer[]
// tag::stopContainer[]
task stopContainer(type: DockerStopContainer) { // <1>
    targetContainerId createContainer.containerId // <2>
    waitTime = 15 // <3>
    onComplete {
        logger.lifecycle "$name:stopped:${createContainer.containerId.get()}"
    }
}
// end::stopContainer[]
// tag::removeContainer[]
task removeContainer(
    type: DockerRemoveContainer, // <1>
    dependsOn: stopContainer // <2>
) {
    targetContainerId createContainer.containerId // <3>
    onComplete {
        logger.lifecycle "$name:removed:${createContainer.containerId.get()}"
    }
}
// end::removeContainer[]
// tag::testContainer[]
task testContainer(dependsOn: [verifyImage, startContainer]) { // <1>
    group 'verification'   // <2>
    finalizedBy removeContainer // <3>
    doFirst {
        def localGet = new URL('http://localhost:8080')
        def getConnection = localGet.openConnection()
        getConnection.requestMethod = 'GET'
        assert getConnection.responseCode == 200 // <4>
        logger.lifecycle "$name:responds"
    }
    doLast {
        def localGet = new URL('http://localhost:8080/turnstile')
        def connection = localGet.openConnection()
        connection.requestMethod = 'POST'
        assert connection.responseCode == 200 // <5>
        def jsonSlurper = new groovy.json.JsonSlurper()
        def text = connection.inputStream.withReader {
            it.readLines().join('\n')
        }
        def response = jsonSlurper.parseText(text)
        logger.info "response:$response"
        assert response._links != null // <6>
        assert response._links.self != null
        assert response._links.self.href.contains('/turnstile/')
        logger.lifecycle "$name:passed"
    }
}
check.dependsOn(testContainer) // <7>
// end::testContainer[]
